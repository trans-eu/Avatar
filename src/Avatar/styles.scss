@use 'sass:math';

@import '../variables.scss';

@function strip-units($number) {
    @return math.div($number, $number * 0 + 1);
}

@function calc-times($afterValue, $beforeValue: 0) {
    $precision: 0.01; // assumed (100% - px) precision
    $maxValue: max($beforeValue, $afterValue);
    // times - how many times precision must be multiplied to be over max value
    $times: ceil(math.div(strip-units($maxValue), $precision)) + 1;
    $diff: $afterValue - $beforeValue;
    $sign: math.div($diff, abs($diff));
    $maxSupportedFontSize: 2 * strip-units($defaultFontSize);

    @return $sign * $times * $maxSupportedFontSize;
}

// set width to $afterBreakpointWidth when parent element width is over $parentBreakpointWidth
// set width to $beforeBreakpointWidth when parent element width is under $parentBreakpointWidth
@mixin parent-breakpoint($parentBreakpointWidth, $afterBreakpointWidth, $beforeBreakpointWidth: 0, $correction: false) {
    $minWidth: min($beforeBreakpointWidth, $afterBreakpointWidth);
    $maxWidth: max($beforeBreakpointWidth, $afterBreakpointWidth);

    min-width: $minWidth;
    width: calc((100% - (#{$parentBreakpointWidth} - #{if($correction, 0.5px, 0px)})) * #{calc-times($afterBreakpointWidth, $beforeBreakpointWidth)});
    max-width: $maxWidth;
}

.wrapper {
    position: relative;
    z-index: 0;

    &::before {
        content: "";
        padding-top: 100%;
        display: block;
    }
}

.positioner {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
}

.avatar {
    border-radius: 50%;
    overflow: hidden;
    width: 100%;
    height: 100%;
    color: #fff;
    position: relative;

    @each $size,
    $statusSize in $statusSizes {
        $statusRadius: math.div($statusSize + $statusBorder, 2);
        $outlineRadius: math.div($statusSize, 2) + $statusBorder;

        &.#{$size}Avatar {
            mask-image: radial-gradient(circle at bottom $statusRadius right $statusRadius,
                rgba(0, 0, 0, 0) $outlineRadius,
                rgba(0, 0, 0, 1) calc(#{$outlineRadius} + 1px) // 1px for aliasing
            );
        }
    }
}

.image {
    color: transparent; // Don't show alt text in FireFox.
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    height: 100%;
}


.initials {
    color: #fff;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;

    @each $size,
    $avatarSize in $avatarSizes {
        $fontSizeScale: 0.4;

        .#{$size} & {
            font-size: $avatarSize * $fontSizeScale;
        }
    }
}

.hidden {
    opacity: 0;
}

.hiddenImage {
    composes: image;
    composes: hidden;
}

.hiddenInitials {
    composes: initials;
    composes: hidden;
}

@each $size,
$avatarSize in $avatarSizes {
    .#{$size} {
        composes: wrapper;
        width: $avatarSize;
    }
}

.responsive {
    min-width: 0;

    @each $size,
    $avatarSize in $avatarSizes {
        &.#{$size} {
            @include parent-breakpoint($avatarSize, $avatarSize, 0, true);

            &.hasStatus {
                min-width: map-get($statusSizes, $size) + $statusBorder;
            }
        }
    }
}
